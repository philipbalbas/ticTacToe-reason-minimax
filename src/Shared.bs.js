// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";

function checkIfWon(flattened, head) {
  var match = List.nth(flattened, List.nth(head, 0));
  var match$1 = List.nth(flattened, List.nth(head, 1));
  var match$2 = List.nth(flattened, List.nth(head, 2));
  if (match) {
    if (match[0]) {
      if (match$1 && match$1[0] && match$2 && match$2[0]) {
        return /* Cross */0;
      } else {
        return /* None */2;
      }
    } else if (match$1 && !(match$1[0] || !(match$2 && !match$2[0]))) {
      return /* Circle */1;
    } else {
      return /* None */2;
    }
  } else {
    return /* None */2;
  }
}

function oppositePlayer(player) {
  if (player) {
    return /* Human */0;
  } else {
    return /* Computer */1;
  }
}

function checkGameStatus(_winTable, flattenedBoard, gameStatus) {
  while(true) {
    var winTable = _winTable;
    var head = List.hd(winTable);
    var tail = List.tl(winTable);
    var isTied = List.for_all((function (tile) {
            if (Caml_obj.caml_equal(tile, /* Marked */[/* Human */0])) {
              return true;
            } else {
              return Caml_obj.caml_equal(tile, /* Marked */[/* Computer */1]);
            }
          }), flattenedBoard);
    var match = checkIfWon(flattenedBoard, head);
    var exit = 0;
    switch (match) {
      case 0 : 
          return /* Won */Block.__(1, [/* Computer */1]);
      case 1 : 
          return /* Won */Block.__(1, [/* Human */0]);
      case 2 : 
          if (tail) {
            exit = 1;
          } else if (Caml_obj.caml_equal(gameStatus, /* Turn */Block.__(0, [/* Computer */1]))) {
            return /* Turn */Block.__(0, [/* Human */0]);
          } else if (Caml_obj.caml_equal(gameStatus, /* Turn */Block.__(0, [/* Human */0]))) {
            return /* Turn */Block.__(0, [/* Computer */1]);
          } else {
            exit = 1;
          }
          break;
      
    }
    if (exit === 1) {
      if (isTied) {
        return /* Tie */0;
      } else {
        _winTable = tail;
        continue ;
      }
    }
    
  };
}

function makeMove(board, move, gameStatus) {
  return List.mapi((function (rowIndex, row) {
                return List.mapi((function (tileIndex, value) {
                              var tileId = String(rowIndex) + String(tileIndex);
                              var match = tileId === move;
                              if (match) {
                                if (typeof gameStatus === "number" || gameStatus.tag) {
                                  return /* Empty */0;
                                } else if (value) {
                                  return value;
                                } else {
                                  return /* Marked */[gameStatus[0]];
                                }
                              } else {
                                return value;
                              }
                            }), row);
              }), board);
}

var winTable = /* :: */[
  /* :: */[
    0,
    /* :: */[
      1,
      /* :: */[
        2,
        /* [] */0
      ]
    ]
  ],
  /* :: */[
    /* :: */[
      3,
      /* :: */[
        4,
        /* :: */[
          5,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        6,
        /* :: */[
          7,
          /* :: */[
            8,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          0,
          /* :: */[
            3,
            /* :: */[
              6,
              /* [] */0
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            1,
            /* :: */[
              4,
              /* :: */[
                7,
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              2,
              /* :: */[
                5,
                /* :: */[
                  8,
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                0,
                /* :: */[
                  4,
                  /* :: */[
                    8,
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  2,
                  /* :: */[
                    4,
                    /* :: */[
                      6,
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

export {
  winTable ,
  checkIfWon ,
  oppositePlayer ,
  checkGameStatus ,
  makeMove ,
  
}
/* No side effect */
