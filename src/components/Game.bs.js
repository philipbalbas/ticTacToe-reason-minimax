// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as AI$ReactHooksTemplate from "./AI.bs.js";
import * as Board$ReactHooksTemplate from "./Board.bs.js";
import * as Shared$ReactHooksTemplate from "../Shared.bs.js";

var initialState = /* record */[
  /* board : :: */[
    /* :: */[
      /* Empty */0,
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* [] */0
        ]
      ]
    ],
    /* :: */[
      /* :: */[
        /* Empty */0,
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* [] */0
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          /* Empty */0,
          /* :: */[
            /* Empty */0,
            /* :: */[
              /* Empty */0,
              /* [] */0
            ]
          ]
        ],
        /* [] */0
      ]
    ]
  ],
  /* gameStatus : None */1,
  /* tally : record */[
    /* cross */0,
    /* circle */0,
    /* tie */0
  ]
];

function Game(Props) {
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            if (action !== 0) {
              return /* record */[
                      /* board : :: */[
                        /* :: */[
                          /* Empty */0,
                          /* :: */[
                            /* Empty */0,
                            /* :: */[
                              /* Empty */0,
                              /* [] */0
                            ]
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            /* Empty */0,
                            /* :: */[
                              /* Empty */0,
                              /* :: */[
                                /* Empty */0,
                                /* [] */0
                              ]
                            ]
                          ],
                          /* :: */[
                            /* :: */[
                              /* Empty */0,
                              /* :: */[
                                /* Empty */0,
                                /* :: */[
                                  /* Empty */0,
                                  /* [] */0
                                ]
                              ]
                            ],
                            /* [] */0
                          ]
                        ]
                      ],
                      /* gameStatus : Turn */Block.__(0, [/* Human */0]),
                      /* tally */state[/* tally */2]
                    ];
            } else {
              return /* record */[
                      /* board */state[/* board */0],
                      /* gameStatus : Turn */Block.__(0, [/* Human */0]),
                      /* tally */state[/* tally */2]
                    ];
            }
          } else {
            var match = state[/* gameStatus */1];
            var exit = 0;
            if (typeof match === "number" || match.tag !== 1) {
              exit = 1;
            } else {
              return state;
            }
            if (exit === 1) {
              var updatedBoard = Shared$ReactHooksTemplate.makeMove(state[/* board */0], action[0], state[/* gameStatus */1]);
              var flattened = List.flatten(updatedBoard);
              var updateGameStatus = function (prevBoard, updatedBoard, prevGameStatus, winTable) {
                var match = Caml_obj.caml_equal(prevBoard, updatedBoard);
                if (match) {
                  return prevGameStatus;
                } else {
                  return Shared$ReactHooksTemplate.checkGameStatus(winTable, flattened, state[/* gameStatus */1]);
                }
              };
              var updatedGameStatus = updateGameStatus(state[/* board */0], updatedBoard, state[/* gameStatus */1], Shared$ReactHooksTemplate.winTable);
              var updatedTally;
              if (typeof updatedGameStatus === "number") {
                if (updatedGameStatus === 0) {
                  var init = state[/* tally */2];
                  updatedTally = /* record */[
                    /* cross */init[/* cross */0],
                    /* circle */init[/* circle */1],
                    /* tie */state[/* tally */2][/* tie */2] + 1 | 0
                  ];
                } else {
                  updatedTally = state[/* tally */2];
                }
              } else if (updatedGameStatus.tag) {
                if (updatedGameStatus[0]) {
                  var init$1 = state[/* tally */2];
                  updatedTally = /* record */[
                    /* cross */init$1[/* cross */0],
                    /* circle */state[/* tally */2][/* circle */1] + 1 | 0,
                    /* tie */init$1[/* tie */2]
                  ];
                } else {
                  var init$2 = state[/* tally */2];
                  updatedTally = /* record */[
                    /* cross */state[/* tally */2][/* cross */0] + 1 | 0,
                    /* circle */init$2[/* circle */1],
                    /* tie */init$2[/* tie */2]
                  ];
                }
              } else {
                updatedTally = state[/* tally */2];
              }
              return /* record */[
                      /* board */updatedBoard,
                      /* gameStatus */updatedGameStatus,
                      /* tally */updatedTally
                    ];
            }
            
          }
        }), initialState);
  var dispatch = match[1];
  var match$1 = match[0];
  var tally = match$1[/* tally */2];
  var gameStatus = match$1[/* gameStatus */1];
  var board = match$1[/* board */0];
  React.useEffect((function () {
          if (Caml_obj.caml_equal(gameStatus, /* Turn */Block.__(0, [/* Computer */1]))) {
            var move = AI$ReactHooksTemplate.getBestMove(board);
            Curry._1(dispatch, /* Mark */[move]);
          }
          return undefined;
        }), /* array */[gameStatus]);
  var currentPlayer;
  currentPlayer = typeof gameStatus === "number" || gameStatus.tag ? "" : (
      gameStatus[0] ? "Computer" : "You"
    );
  var menu;
  if (typeof gameStatus === "number") {
    menu = gameStatus === 0 ? React.createElement(React.Fragment, undefined, React.createElement("div", undefined, "It's a draw"), React.createElement("button", {
                onClick: (function (param) {
                    return Curry._1(dispatch, /* Rematch */1);
                  })
              }, "Get a rematch")) : React.createElement("button", {
            onClick: (function (param) {
                return Curry._1(dispatch, /* Start */0);
              })
          }, "Start Game");
  } else if (gameStatus.tag) {
    var wonText = gameStatus[0] ? "All hail the machine!" : "You beat the computer!";
    menu = React.createElement(React.Fragment, undefined, React.createElement("div", undefined, wonText), React.createElement("button", {
              onClick: (function (param) {
                  return Curry._1(dispatch, /* Rematch */1);
                })
            }, "Get a rematch"));
  } else {
    menu = gameStatus[0] ? React.createElement("div", undefined, "Playing: " + (String(currentPlayer) + "")) : React.createElement("div", undefined, "Playing: " + (String(currentPlayer) + ""));
  }
  return React.createElement("div", {
              className: "container"
            }, React.createElement("div", undefined, React.createElement(Board$ReactHooksTemplate.make, {
                      board: board,
                      gameStatus: gameStatus,
                      setMark: (function (id) {
                          return Curry._1(dispatch, /* Mark */[id]);
                        })
                    }), React.createElement("div", undefined, menu), React.createElement("div", {
                      className: "scoreboard"
                    }, React.createElement("div", undefined, "Player: " + (String(tally[/* cross */0]) + "")), React.createElement("div", undefined, "Tie: " + (String(tally[/* tie */2]) + "")), React.createElement("div", undefined, "Computer: " + (String(tally[/* circle */1]) + "")))));
}

var make = Game;

export {
  initialState ,
  make ,
  
}
/* react Not a pure module */
